<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Command</key>
	<string># 現在、日中、夜間、明日のスクリプト
[ -f "$HOME/.bashrc" ] &amp;&amp; source "$HOME/.bashrc"
[ -f "$HOME/.zshrc" ] &amp;&amp; source "$HOME/.zshrc"

# 場所のURL
WEATHER_URL=${WEATHER_URL:='https://www.accuweather.com/en/jp/koto-ku/221230/weather-forecast/221230'}

# 表示する要素（0 表示しない、1 表示する）
FLG_C=0  # 現在
FLG_D=1  # 日中
FLG_N=1  # 夜間
FLG_T=1  # 明日
# 現在で表示する内容（0 表示しない、1 表示する）
F_TEMP_C=1  # 温度・天気
F_HUM=1     # 湿度
F_PRES=1    # 気圧
F_CC=1      # 雲量
F_UV_C=0    # 紫外線量
# 日中・夜間・明日で表示する内容（0 表示しない、1 表示する）
F_TEMP_E=1  # 温度・天気
F_PROB=1    # 降水確率
F_PRECIP=1  # 降水量
F_UV=0      # 紫外線量
# 各段の間の改行数
NLF=1
# 見出しの色 （30 黒、31 赤、32 緑、33 黄、34 青、35 マゼンタ、36 シアン、37 白、0 デフォルト、二桁目が4で背景の色指定）
COLOR_CP="37;40"
# 天気アイコンを取得する？（0 取得しない、1 取得する）
F_ICON=1

# データ整理用関数
char_conv() { ruby -pe 'gsub(/&amp;#[xX]([0-9a-fA-F]+);/) { [$1.to_i(16)].pack("U") }'; }
pickup_data_0() { echo "$1" | grep -A1 "$2" | grep -v "$2" | perl -pe 's/--\n//g' | sed -e 's/&lt;[^&gt;]*&gt;//g' | tr -d '\t' | char_conv; }
pickup_data_1() { echo "$1" | awk /"$2"/,/"$3"/ | sed s/'&lt;div class="half-day-card content-module"&gt;'/^/g | sed -e '1d' | tr -d '\t'; }

# 元データ取得
USER_AGENT='Mozilla/5.0 (Macintosh; Intel Mac OS X)'
WEATHER_DATA="$(curl -A "$USER_AGENT" --silent $WEATHER_URL)"
WEATHER_TODAY="$(curl -A "$USER_AGENT" --silent ${WEATHER_URL/weather-forecast/current-weather})"
WEATHER_TOMORROW="$(curl -A "$USER_AGENT" --silent "${WEATHER_URL/weather-forecast/daily-weather-forecast}?day=2")"
DATA_NOW="$(echo "$WEATHER_DATA" | awk '/glacier-ad top content-module/,/connatix/' | tr -d '\t' | char_conv)"
_IFS="$IFS";IFS='^'
DATA_TODAY=($(pickup_data_1 "$WEATHER_TODAY" 'half-day-card non-ad content-module' '&lt;div class="quarter-day-ctas"&gt;' | sed -e 's/&lt;div class="quarter-day-ctas"&gt;/^/g'))
DATA_TOMORROW=($(pickup_data_1 "$WEATHER_TOMORROW" 'half-day-card non-ad content-module' '&lt;div class="quarter-day-ctas"&gt;' | sed 's/&lt;div class="quarter-day-ctas"&gt;/^/g'))
F_N=0
if [ ${#DATA_TODAY[@]} -eq 1 ]; then
  DATA_TODAY[1]="${DATA_TODAY[0]}"
  DATA_TODAY[0]=''
  F_N=1
fi
IFS="$_IFS"
_IFS="$IFS";IFS=$'\n'
DATA_C=($(echo "$WEATHER_TODAY" | grep -A2 '&lt;div class="detail-item spaced-content"&gt;' | grep -e '&lt;div&gt;' -e '--' | tr -d '\t' | perl -pe 's/\n//g' | sed 's/&lt;\/div&gt;&lt;div&gt;/: /g' | sed -e 's/&lt;[^&gt;]*&gt;//g' | perl -pe 's/--/\n/g' | char_conv))
DATA_D=($(echo "${DATA_TODAY[0]}" | grep '&lt;p class="panel-item"&gt;' | sed -e 's/&lt;span class=\"value\"&gt;/: /g' -e 's/&lt;[^&gt;]*&gt;//g' | char_conv))
DATA_N=($(echo "${DATA_TODAY[1]}" | grep '&lt;p class="panel-item"&gt;' | sed -e 's/&lt;span class=\"value\"&gt;/: /g' -e 's/&lt;[^&gt;]*&gt;//g' | char_conv))
DATA_T=($(echo "${DATA_TOMORROW[0]}" | grep '&lt;p class="panel-item"&gt;' | sed -e 's/&lt;span class=\"value\"&gt;/: /g' -e 's/&lt;[^&gt;]*&gt;//g' | char_conv))
IFS="$_IFS"

# 各データ取得
TITLE_C=$(echo "$WEATHER_TODAY" | grep -A1 'card-header spaced-content' | grep -v 'card-header spaced-content' | perl -pe 's/--\n//g' | sed -e 's/&lt;[^&gt;]*&gt;//g' | tr -d '\t' | char_conv)
TITLE_D=$(echo "${DATA_TODAY[0]}" | grep '&lt;h2 class="title"&gt;' | sed -e 's/&lt;[^&gt;]*&gt;//g' | char_conv)
TITLE_N=$(echo "${DATA_TODAY[1]}" | grep '&lt;h2 class="title"&gt;' | sed -e 's/&lt;[^&gt;]*&gt;//g' | char_conv)
TITLE_T=$(echo "$WEATHER_DATA" | grep -A2 '?day=2' | grep -A1 'card-header' | grep -v 'card-header' | sed -e 's/&lt;[^&gt;]*&gt;//g' | tr -d '\t' | char_conv)
TEMP_C=$(echo "$WEATHER_TODAY" | grep 'div class="display-temp"' | sed -e 's/&lt;[^&gt;]*&gt;//g' | tr -d '\t' | char_conv)
TEMP_D=$(echo "${DATA_TODAY[0]}" | grep -A1 'temperature' | grep -v 'temperature' | sed -e 's/&lt;[^&gt;]*&gt;//g' | sed -e 's/--//g' | tr -d '\n' | char_conv)
TEMP_N=$(echo "${DATA_TODAY[1]}" | grep -A1 'temperature' | grep -v 'temperature' | sed -e 's/&lt;[^&gt;]*&gt;//g' | sed -e 's/--//g' | tr -d '\n' | char_conv)
_IFS="$IFS";IFS=$'\n'
TEMP_T=($(echo "$WEATHER_TOMORROW" | grep -A2 '&lt;div class="temperature"&gt;' | grep 'span class' | sed -e 's/&lt;[^&gt;]*&gt;//g' |  tr -d '\t' | char_conv))
IFS="$_IFS"
PHRASE_C=$(echo "$DATA_NOW" | grep '&lt;span class="phrase"&gt;' | sed -e 's/&lt;[^&gt;]*&gt;//g' |  tr -d '\t')
PHRASE_D=$(echo "${DATA_TODAY[0]}" | grep 'phrase' | sed -e 's/&lt;[^&gt;]*&gt;//g' | char_conv)
PHRASE_N=$(echo "${DATA_TODAY[1]}" | grep 'phrase' | sed -e 's/&lt;[^&gt;]*&gt;//g' | char_conv)
#PHRASE_T=$(echo "$WEATHER_TOMORROW" | grep -m1 '&lt;div class="phrase"&gt;' | sed -e 's/&lt;[^&gt;]*&gt;//g' |  tr -d '\t' | char_conv)
PHRASE_T=$(echo "$WEATHER_DATA" | grep -A16 '?day=2' | grep -m1 'class="phrase"' | sed -e 's/&lt;[^&gt;]*&gt;//g' | tr -d '\t' | char_conv)

ICON_CUR=$(printf "%02d" $(echo "$WEATHER_TODAY" | grep '<svg class="weather-icon"'  | awk -F'weathericons/' '{print $2}' | cut -f 1 -d "."))
ICON_D=$(printf "%02d\n" $(echo "${DATA_TODAY[0]}" | grep 'svg class="icon'  | awk -F'weathericons/' '{print $2}' | cut -f 1 -d "."))
ICON_N=$(printf "%02d\n" $(echo "${DATA_TODAY[1]}" | grep 'svg class="icon'  | awk -F'weathericons/' '{print $2}' | cut -f 1 -d "."))
ICON_T=$(printf "%02d" $(echo "${DATA_TOMORROW[0]}" |  grep 'svg class="icon' | awk -F'weathericons/' '{print $2}' | cut -f 1 -d "."))

#  現在、日中、夜間、明日の天気を表示して天気アイコンを取得し保存
if [ $FLG_C -eq 1 ]; then
  echo "\033[0;${COLOR_CP}m"$TITLE_C"\033[0m"
  [ $F_TEMP_C -eq 1 ] &amp;&amp; printf "%-5s \t%s\n" $TEMP_C "$PHRASE_C"
  [ $F_HUM -eq 1 ] &amp;&amp; echo ${DATA_C[$((3-$F_N))]}" \t" | tr -d '\n'
  [ $F_PRES -eq 1 ] &amp;&amp; echo ${DATA_C[$((6-$F_N))]}" \t" | tr -d '\n'
  [ $F_CC -eq 1 ] &amp;&amp; echo ${DATA_C[$((7-$F_N))]}" \t" | tr -d '\n'
  if  [ $F_UV_C -eq 1 ]; then
  [ $F_N -eq 0 ] &amp;&amp; echo ${DATA_C[0]}" \t" | tr -d '\n'
  fi
  echo
  for (( m=0; m &lt; $NLF; ++m)); do echo; done
  if [ $F_ICON -eq 1 ]; then
    echo "https://vortex.accuweather.com/adc2010/images/slate/icons/"$ICON_CUR"-l.png" | xargs curl --silent -o /tmp/weather_current.png
  fi
fi
if [ $FLG_D -eq 1 ]; then
  echo "\033[0;${COLOR_CP}m"$TITLE_D"\033[0m"
  [ $F_TEMP_E -eq 1 ] &amp;&amp; printf "%-5s \t%s\n" "$TEMP_D" "$PHRASE_D"
  [ $F_PROB -eq 1 ] &amp;&amp; echo ${DATA_D[3]}" \t" | tr -d '\n'
  [ $F_PRECIP -eq 1 ] &amp;&amp; echo ${DATA_D[5]}" \t" | tr -d '\n'
  [ $F_UV -eq 1 ] &amp;&amp; echo ${DATA_D[0]}" \t" | tr -d '\n'
  echo
  for (( m=0; m &lt; $NLF; ++m)); do echo; done
  if [ $F_ICON -eq 1 ]; then
    echo "https://vortex.accuweather.com/adc2010/images/slate/icons/"$ICON_D"-l.png" | xargs curl --silent -o /tmp/weather_today.png
  fi
fi
if [ $FLG_N -eq 1 ]; then
  echo "\033[0;${COLOR_CP}m"$TITLE_N"\033[0m"
  [ $F_TEMP_E -eq 1 ] &amp;&amp; printf "%-5s  \t%s\n" "$TEMP_N" "$PHRASE_N"
  [ $F_PROB -eq 1 ] &amp;&amp; echo ${DATA_N[2]}" \t" | tr -d '\n'
  [ $F_PRECIP -eq 1 ] &amp;&amp; echo ${DATA_N[4]}" \t" | tr -d '\n'
  [ $F_UV -eq 1 ] &amp;&amp; echo | tr -d '\n'
  echo
  for (( m=0; m &lt; $NLF; ++m)); do echo; done
  if [ $F_ICON -eq 1 ]; then
    echo "https://vortex.accuweather.com/adc2010/images/slate/icons/"$ICON_N"-l.png" | xargs curl --silent -o /tmp/weather_tonight.png
  fi
fi
if [ $FLG_T -eq 1 ]; then
  echo "\033[0;${COLOR_CP}m"$TITLE_T"\033[0m"
  [ $F_TEMP_E -eq 1 ] &amp;&amp; printf "%-5s / %-5s  \t%s\n" ${TEMP_T[0]} "${TEMP_T[1]}" "$PHRASE_T"
  [ $F_PROB -eq 1 ] &amp;&amp; echo ${DATA_T[3]}" \t" | tr -d '\n'
  [ $F_PRECIP -eq 1 ] &amp;&amp; echo ${DATA_T[5]}" \t" | tr -d '\n'
  [ $F_UV -eq 1 ] &amp;&amp; echo ${DATA_T[0]} | tr -d '\n'
  echo
  if [ $F_ICON -eq 1 ]; then
    echo "https://vortex.accuweather.com/adc2010/images/slate/icons/"$ICON_T"-l.png" | xargs curl --silent -o /tmp/weather_tomorrow.png
  fi
fi

# 画像GeekletをRefleshする
osascript &lt;&lt;EOT
  tell application "GeekTool Helper"
    tell image geeklets to refresh
  end tell
EOT</string>
	<key>DropShadow</key>
	<false/>
	<key>FailureImage</key>
	<data>
	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
	</data>
	<key>FontFamily</key>
	<string>HelveticaNeue-Light</string>
	<key>FontSize</key>
	<real>16</real>
	<key>ForceCR</key>
	<false/>
	<key>GeekletFrame</key>
	<string>{{140, 400}, {608.551025390625, 374.1097412109375}}</string>
	<key>HasShadow</key>
	<false/>
	<key>Identifier</key>
	<string>org.tynsoe.geeklet.shell</string>
	<key>Name</key>
	<string>04_current_day_night_tomorrow</string>
	<key>RefreshInterval</key>
	<integer>600</integer>
	<key>SetLocale</key>
	<true/>
	<key>SuccessImage</key>
	<data>
	TU0AKgAABAj///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAGgAAACAAAAAaAAAA
	DQAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAgBAQFYFhUWqygn
	KOEvLi/9KCco4RYVFqsBAQFYAAAACAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAgG
	AwZ8Pj0+8peYl//S0tP/4+Tl/9LS0/+XmJf/Pj0+8gYDBnwAAAAIAAAAAAAAAAD///8A
	AAAAAAAAAAUDAQJlLTEt9HqRff+40Ln/1efT/9jo1f/V59P/uNG5/3qRff8tMS30AwEC
	ZQAAAAUAAAAA////AAAAAAAAAAAmEBYQyz1tP/9Xm03/eLJX/4e6YP+HuWL/h7pg/3ix
	V/9Wmk3/PWw//xAWEMsAAAAmAAAAAP///wAAAAAAAAAAThY8Gvc8jjD/TJwb/2CnHf9r
	ryz/bLEv/2ywLP9iqR7/TJ4b/zyQMP8WPBr3AAAATQAAAAD///8AAAAAAQAIAGgeYRv/
	VaUq/2WvIP91uzb/gsZI/4bIS/+DyEj/d743/2exIP9WqSr/HmIb/wAIAGcAAAAB////
	AAAAAAgADABsJ3MY/3C6Nv9/xz3/kNNT/57dYv+i32f/n99k/5HWVP+AyD3/cr02/yd0
	GP8ADQBsAAAACf///wAAAAAMAAYAYydqEPB/yD7/lNhW/6PlZv+x8Xb/uPd8/7P0eP+k
	6Gf/ldpX/4DLQP8maxDvAAYAYwAAAAv///8AAAAADwAAAE4XRwXLd8Y5/6foa/+393v/
	wv6F/8r/i//F/4b/uPt8/6rubP95yTr/F0kFygAAAEwAAAAN////AAAAAAwAAAAyAAwA
	jEB6GOyh7Vz/yP+J/9X/mP/b/5//2P+b/83/i/+m9F3/Qn4X7AEMAIsAAAAzAAAADP//
	/wAAAAAFAAAAIAAAAF4GFQCpTIQc6ZbZU/zC+3n/2P+L/8T6fP+a21b8UIkd6AYXAKkA
	AABcAAAAIAAAAAX///8AAAAAAQAAAA0AAAAzAAAAZwAFAKIaMwTHQGIZ2FV5JuFAYhnZ
	GzQEyAAFAKAAAABnAAAAMgAAAA0AAAAB////AAAAAAAAAAADAAAAEQAAADQAAABdAAAA
	ewAAAI8AAACWAAAAjwAAAHsAAABcAAAAMwAAABEAAAADAAAAAP///wAAAAAAAAAAAAAA
	AAMAAAAOAAAAIQAAADYAAABGAAAATAAAAEcAAAA2AAAAIQAAAA0AAAAEAAAAAAAAAAD/
	//8AAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAALAAAAEAAAABMAAAASAAAADAAAAAUAAAAB
	AAAAAAAAAAAAAAAAABABAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgADAAAABAAABM4B
	AwADAAAAAQABAAABBgADAAAAAQACAAABCgADAAAAAQABAAABEQAEAAAAAQAAAAgBEgAD
	AAAAAQABAAABFQADAAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAAAQAABAABHAADAAAA
	AQABAAABKAADAAAAAQACAAABUgADAAAAAQACAAABUwADAAAABAAABNaHcwAHAAACqAAA
	BN4AAAAAAAgACAAIAAgAAQABAAEAAQAAAqhhcHBsAhAAAG1udHJSR0IgWFlaIAfjAAoA
	DwAAAAAAAGFjc3BBUFBMAAAAAEFQUEwAAAAAAAAAAAAAAAAAAAAAAAD21gABAAAAANMt
	YXBwbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	DGRlc2MAAAEUAAAAdGNwcnQAAAGIAAAAI3d0cHQAAAGsAAAAFHJYWVoAAAHAAAAAFGdY
	WVoAAAHUAAAAFGJYWVoAAAHoAAAAFHJUUkMAAAH8AAAADnZjZ3QAAAIMAAAAMG5kaW4A
	AAI8AAAAPmNoYWQAAAJ8AAAALGJUUkMAAAH8AAAADmdUUkMAAAH8AAAADmRlc2MAAAAA
	AAAAGkNhbGlicmF0ZWQgUkdCIENvbG9yc3BhY2UAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAdGV4dAAAAABDb3B5cmlnaHQgQXBwbGUgSW5jLiwgMjAxOQAAWFlaIAAAAAAA
	APNRAAEAAAABFsxYWVogAAAAAAAAb6AAADj1AAADkFhZWiAAAAAAAABilwAAt4cAABjZ
	WFlaIAAAAAAAACSfAAAPhAAAtsNjdXJ2AAAAAAAAAAEBzQAAdmNndAAAAAAAAAABAAEA
	AAAAAAAAAQAAAAEAAAAAAAAAAQAAAAEAAAAAAAAAAQAAbmRpbgAAAAAAAAA2AACj1wAA
	VHsAAEzNAACZmgAAJmYAAA9cAABQDQAAVDkAAczOAAHMzgABzM4AAAAAAAAAAHNmMzIA
	AAAAAAEMQgAABd7///MmAAAHkwAA/ZD///ui///9owAAA9wAAMBu
	</data>
	<key>TextColor</key>
	<data>
	BAtzdHJlYW10eXBlZIHoA4QBQISEhAdOU0NvbG9yAISECE5TT2JqZWN0AIWEAWMBhARm
	ZmZmAYNS/n8/g27/fz+D1XQ/P4Y=
	</data>
	<key>TextStrikethrough</key>
	<integer>0</integer>
	<key>TextUnderline</key>
	<integer>0</integer>
	<key>Timeout</key>
	<integer>60</integer>
</dict>
</plist>
